@page "/fetchuserdetails"
<h1>User Data</h1>
<p>Mantenimiento de Usuarios</p>
<div class="row">
    <div class="col-md-6">
        <a href="/user/add" class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Agregar Usuario
        </a>
    </div>
    <br />
    <!--Campo de busqueda-->
    <div class="imput-group col">
        <input type="text" class="form-control" placeholder="Buscar por nombre"
        @bind="searchString" @bind:event="oninput" @onkeyup="FilterUser" />
        <!--Boton para limpiar el campo de busqueda-->
        @if(searchString.Length > 0)
        {
            <div class="input-group-apped">
                <button class="btn btn-danger" @onclick="resetSearch">
                    <i class="fas fa-times"></i>Limpiar
                </button>
            </div>
        }
    </div>
</div>
    <br/>
    <!--Mensaje de Carga de los datos-->
    @if (usersList == null)
    {
        <p><em>Cargando...</em>></p>
    }
    else
    {
        <!--Tabla de usuarios-->
        <table class="table table-striped align=middle table=bordered">
            <thead class="table-success">
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Direccion</th>
                    <th>Telefono Celular</th>
                    <th>Correo Electronico</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in usersList)
                {
                    <tr>
                        <td>@user.UserId</td>
                        <td>@user.UserName</td>
                        <td>@user.Address</td>
                        <td>@user.CellNumber</td>
                        <td>@user.EmailId</td>
                        <!--Botones para editar y eliminar-->
                        <td>
                            <a href="/user/edit/@user.UserId" class="btn btn-outline-dark" role="button">
                                Editar
                            </a>
                            <a href="/user/delete/@user.UserId" class="btn btn-outline-dark">
                                Eliminar
                            </a>
                        </td>
                    </tr>
                }
            </tbody>   
        </table>   
    }


@code {
    List<User>? usersList = new List<User>();
    List<User>? searchUserData = new List<User>();//lo que se encontro de la busqueda
    User user= new User();
    string searchString { get; set; }=string.Empty; //capturamos lo que se quiere buscar

    //Metodo para obtener los usuarios y cargarlos en la lista
    protected override  async Task OnInitializedAsync()
    {
        await GetUser();
    }

    //Metodo para obtener los usuarios
    protected async Task GetUser()
    {
        usersList = await Http.GetFromJsonAsync<List<User>>("api/User");
        searchUserData = usersList; //cargamos la lista de usuarios en la lista de busqueda
    }

    //Metodo para filtrar los usuarios y realizar la busqueda
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(searchString))
        {
            //si hay algo en el campo de busqueda, se filtra la lista de usuarios
            usersList= searchUserData
            .Where(x => x.UserName.IndexOf(searchString,StringComparison.OrdinalIgnoreCase)!= -1)
            .ToList();
        }
        else
        {
            usersList = searchUserData;//si no hay nada en el campo de busqueda, se cargan todos los usuarios
        }
    }

    //Metodo para limpiar el campo de busqueda
    protected void resetSearch()
    {
        searchString = string.Empty;//limpiamos el campo de busqueda
        usersList = searchUserData;//cargamos todos los usuarios

    }

}
